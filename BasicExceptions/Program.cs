using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace BasicExceptions
{
	class Program
	{
		static void Main(string[] args)
		{
			int numerator = 90;
			int denominator = 0;

			float total;

			try
			{
				Console.WriteLine("Calculating 90 divided by 0\n\n");
				Console.ReadKey();
				total = calculate(numerator, denominator);
			}
			catch (Exception e)
			{
				Console.WriteLine("\nAn error was detected. The error's details are:");
				Console.WriteLine("\tMessage:");
				Console.WriteLine("\t" + e.Message);

				Console.WriteLine("\n\tSource:");
				Console.WriteLine("\t" + e.Source);

				Console.WriteLine("\n\tInner Exception:");
				Console.WriteLine("\t" + e.InnerException);

				Console.WriteLine("\n\tStack Trace:");
				Console.WriteLine("\t" + e.StackTrace);
			}
			finally
			{
				Console.WriteLine("\n\nThis code was ran!");
			}

			Console.ReadKey();


			Console.WriteLine("\n\n\n");


			int i = 15;
			if (i < 16)
			{
				try
				{
					if (i%3 == 0)
					{
						throw new Exception("Custom Exception - Can't use anything divisible by three!");
					}
				}
				catch (Exception e)
				{
					Console.WriteLine(e.Message);
				}
				
			}
			
			Console.ReadKey();
		}

		static float calculate(int numerator, int denominator) { return numerator/denominator; }
	}
}


/*

When your application encounters an exceptional circumstance, such as a division by zero or low memory warning, an exception is generated.

You'll want to use a try block around the statements that might throw exceptions.

Once an exception occurs within the try block, the flow of control immediately jumps to an associated exception handler, if one is present. If no exception handler for a given exception is present, the program stops executing with an error message.

If a catch block defines an exception variable, you can use it to get more information on the type of exception that occurred, as we saw above

Actions that may result in an exception are executed with the try keyword.

An exception handler is a block of code that is executed when an exception occurs. In C#, the catch keyword is used to define an exception handler.

Exceptions can be explicitly generated by a program using the throw keyword.

Exception objects contain detailed information about the error, including the state of the call stack and a text description of the error.

Code in a finally block is executed even if an exception is thrown, thus allowing a program to release resources.

*/